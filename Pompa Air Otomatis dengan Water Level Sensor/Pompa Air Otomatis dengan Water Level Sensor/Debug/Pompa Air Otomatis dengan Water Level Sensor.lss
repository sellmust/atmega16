
GccApplication40.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ef  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000552  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z7relayOnv>:
#include <avr/io.h>

#define RELAY_PIN PB0

void relayOn() {
	PORTB |= (1 << RELAY_PIN);
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	88 bb       	out	0x18, r24	; 24
  72:	08 95       	ret

00000074 <_Z8relayOffv>:
}

void relayOff() {
	PORTB &= ~(1 << RELAY_PIN);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	8e 7f       	andi	r24, 0xFE	; 254
  78:	88 bb       	out	0x18, r24	; 24
  7a:	08 95       	ret

0000007c <main>:
}

int main(void) {
	DDRB |= (1 << RELAY_PIN);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << 3);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	88 60       	ori	r24, 0x08	; 8
  86:	87 bb       	out	0x17, r24	; 23
	ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 64       	ori	r24, 0x40	; 64
  92:	87 b9       	out	0x07, r24	; 7
	TCCR0 |= 0b00011101;
  94:	83 b7       	in	r24, 0x33	; 51
  96:	8d 61       	ori	r24, 0x1D	; 29
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK|= (1<<OCIE0);
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	89 bf       	out	0x39, r24	; 57
	
	
	while (1) {
		ADCSRA |= (1 << ADSC);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	86 b9       	out	0x06, r24	; 6
		if(ADC > 400){
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	81 39       	cpi	r24, 0x91	; 145
  ac:	91 40       	sbci	r25, 0x01	; 1
  ae:	40 f0       	brcs	.+16     	; 0xc0 <main+0x44>
			relayOff();
  b0:	0e 94 3a 00 	call	0x74	; 0x74 <_Z8relayOffv>
			DDRB |= (1 << 3);
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	87 bb       	out	0x17, r24	; 23
			OCR0 = 141;
  ba:	8d e8       	ldi	r24, 0x8D	; 141
  bc:	8c bf       	out	0x3c, r24	; 60
  be:	f0 cf       	rjmp	.-32     	; 0xa0 <main+0x24>
		} else {
			relayOn();
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7relayOnv>
			DDRB &= ~(1 << 3);
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	ea cf       	rjmp	.-44     	; 0xa0 <main+0x24>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
